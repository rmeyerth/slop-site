"use strict";(self.webpackChunkslop_site=self.webpackChunkslop_site||[]).push([[7022],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),d=a,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9971:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={sidebar_position:3},i="Repeat (Loop)",s={unversionedId:"Language/Statements/repeat",id:"Language/Statements/repeat",title:"Repeat (Loop)",description:"The repeat statement is a collection of one or more expressions that is repeated until a condition is met. This is",source:"@site/docs/Language/Statements/repeat.md",sourceDirName:"Language/Statements",slug:"/Language/Statements/repeat",permalink:"/slop-site/docs/Language/Statements/repeat",draft:!1,editUrl:"https://gitlab.com/tronied/slop/docs/Language/Statements/repeat.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Operation",permalink:"/slop-site/docs/Language/Statements/operation"},next:{title:"For Each (Loop)",permalink:"/slop-site/docs/Language/Statements/for-each"}},l={},p=[],c={toc:p};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"repeat-loop"},"Repeat (Loop)"),(0,a.kt)("p",null,"The repeat statement is a collection of one or more expressions that is repeated until a condition is met. This is\nsimilar to the for loop in most languages which consist of three parts. These are:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The loop variable definition and method of progression"),(0,a.kt)("li",{parentName:"ol"},"A value to initialize the loop variable"),(0,a.kt)("li",{parentName:"ol"},"The condition that will be checked every iteration. If it is met then the loop will exit.")),(0,a.kt)("p",null,"The body of the repeat statement is a series of separate expression Strings that are separated by semi-colons. Let's look\nat the simplest example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"repeat(i++,1,<11) result = i;\n")),(0,a.kt)("p",null,"The result of this is:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n")),(0,a.kt)("p",null,"We can reverse that by doing the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"repeat(i--,10,>0) result = i;\n")),(0,a.kt)("p",null,"Which will result in:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n")),(0,a.kt)("p",null,"Each individual expression String in the body operate in exactly the same way as a standard expression. As such, you\ncan use other statements or assign values to variables. The 'result' variable though is a special case where the value\nassigned is used in the resulting array for that iteration. The order of expression evaluation goes from left to right,\nmuch like a standard language if you added a new line character between each e.g.:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"repeat(index++;0;<acme.employees.size())\n   salaryAge = acme.employees[index].salary / acme.employees[index].age; \n   revCalculation = acme.revenue / salaryAge; \n   result = switch(revCalculation)[< 2000: salaryAge * 0.15;< 4000: salaryAge * 0.10; ... ]\n")))}u.isMDXComponent=!0}}]);