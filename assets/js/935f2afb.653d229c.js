"use strict";(self.webpackChunkslop_site=self.webpackChunkslop_site||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/docs/intro","docId":"intro"},{"type":"category","label":"Language","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Overview","href":"/docs/Language/overview","docId":"Language/overview"},{"type":"link","label":"Literals","href":"/docs/Language/literals","docId":"Language/literals"},{"type":"link","label":"Operators","href":"/docs/Language/operators","docId":"Language/operators"},{"type":"link","label":"Functions","href":"/docs/Language/functions","docId":"Language/functions"},{"type":"category","label":"Statements","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Conditional","href":"/docs/Language/Statements/conditional","docId":"Language/Statements/conditional"},{"type":"link","label":"Operation","href":"/docs/Language/Statements/operation","docId":"Language/Statements/operation"},{"type":"link","label":"Repeat (Loop)","href":"/docs/Language/Statements/repeat","docId":"Language/Statements/repeat"},{"type":"link","label":"For Each (Loop)","href":"/docs/Language/Statements/for-each","docId":"Language/Statements/for-each"},{"type":"link","label":"Switch","href":"/docs/Language/Statements/switch","docId":"Language/Statements/switch"},{"type":"link","label":"Field","href":"/docs/Language/Statements/field","docId":"Language/Statements/field"},{"type":"link","label":"Variables","href":"/docs/Language/Statements/variables","docId":"Language/Statements/variables"}]},{"type":"category","label":"Extra Features","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Saving / Loading Lexer Output","href":"/docs/Language/Extra Features/save-load-lexer-output","docId":"Language/Extra Features/save-load-lexer-output"},{"type":"link","label":"Chained Expressions","href":"/docs/Language/Extra Features/chained-expressions","docId":"Language/Extra Features/chained-expressions"}]}]},{"type":"category","label":"Extending","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Design Approach","href":"/docs/Extending/design-approach","docId":"Extending/design-approach"},{"type":"link","label":"Grammar","href":"/docs/Extending/grammar","docId":"Extending/grammar"},{"type":"link","label":"Adding Types / Operations","href":"/docs/Extending/type-operations","docId":"Extending/type-operations"},{"type":"link","label":"Custom Operators","href":"/docs/Extending/custom-operators","docId":"Extending/custom-operators"},{"type":"link","label":"Adding Statements","href":"/docs/Extending/adding-statements","docId":"Extending/adding-statements"},{"type":"link","label":"Pattern Tokens","href":"/docs/Extending/pattern-tokens","docId":"Extending/pattern-tokens"}]},{"type":"link","label":"Questions & Answers","href":"/docs/support","docId":"support"}]},"docs":{"Extending/adding-statements":{"id":"Extending/adding-statements","title":"Adding Statements","description":"To be done","sidebar":"tutorialSidebar"},"Extending/custom-operators":{"id":"Extending/custom-operators","title":"Custom Operators","description":"To be done","sidebar":"tutorialSidebar"},"Extending/design-approach":{"id":"Extending/design-approach","title":"Design Approach","description":"All literals and statements must extend the Token class in order for it to be used by SLOP. Let\'s take a look at an","sidebar":"tutorialSidebar"},"Extending/grammar":{"id":"Extending/grammar","title":"Grammar","description":"The grammar pattern determines not only the structure of the statement and how it can be defined, but also structure","sidebar":"tutorialSidebar"},"Extending/pattern-tokens":{"id":"Extending/pattern-tokens","title":"Pattern Tokens","description":"Although this section is not strictly necessary for extending SLOP, it describes the mechanism through which more","sidebar":"tutorialSidebar"},"Extending/type-operations":{"id":"Extending/type-operations","title":"Adding Types / Operations","description":"As can be seen in the Design Approach section, types can be defined using regular","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"The idea for SLOP came from a need to create a cost effective method of generating documents from templates. These","sidebar":"tutorialSidebar"},"Language/Extra Features/chained-expressions":{"id":"Language/Extra Features/chained-expressions","title":"Chained Expressions","description":"These are where the result of one expression can be referenced in another, effectively creating a chain to","sidebar":"tutorialSidebar"},"Language/Extra Features/save-load-lexer-output":{"id":"Language/Extra Features/save-load-lexer-output","title":"Saving / Loading Lexer Output","description":"As discussed in the Overview section, there are two parts to the execution process which involve the","sidebar":"tutorialSidebar"},"Language/functions":{"id":"Language/functions","title":"Functions","description":"SLOP has been designed to provide as much functionality as possible, but it may be the case where the right results","sidebar":"tutorialSidebar"},"Language/literals":{"id":"Language/literals","title":"Literals","description":"Literals are fixed values but can represent different types. The default set of types are listed below:","sidebar":"tutorialSidebar"},"Language/operators":{"id":"Language/operators","title":"Operators","description":"SLOP uses the same operators as C / C++ / Java languages out of the box. Below a list of the supported operators","sidebar":"tutorialSidebar"},"Language/overview":{"id":"Language/overview","title":"Overview","description":"SLOP includes five main components:","sidebar":"tutorialSidebar"},"Language/Statements/conditional":{"id":"Language/Statements/conditional","title":"Conditional","description":"The conditional or ternary statement is the easiest way to evaluate a condition and select a single value as a result.","sidebar":"tutorialSidebar"},"Language/Statements/field":{"id":"Language/Statements/field","title":"Field","description":"The field statement is a simple method of structuring objects and fields to access values. Similar to how this would","sidebar":"tutorialSidebar"},"Language/Statements/for-each":{"id":"Language/Statements/for-each","title":"For Each (Loop)","description":"The foreach loop is a simplified version of the repeat statement. It simplifies the loop criteria","sidebar":"tutorialSidebar"},"Language/Statements/operation":{"id":"Language/Statements/operation","title":"Operation","description":"An operation does not provide any specific outcome / logic on its own. It can be used to isolate sections of an expression","sidebar":"tutorialSidebar"},"Language/Statements/repeat":{"id":"Language/Statements/repeat","title":"Repeat (Loop)","description":"The repeat statement is a collection of one or more expressions that is repeated until a condition is met. This is","sidebar":"tutorialSidebar"},"Language/Statements/switch":{"id":"Language/Statements/switch","title":"Switch","description":"The switch statement has been so far the most ambitious of the project. Being frustrated by the lack of flexibility in","sidebar":"tutorialSidebar"},"Language/Statements/variables":{"id":"Language/Statements/variables","title":"Variables","description":"Variables at present are classified as statements because they are matched and processed using the Grammar system.","sidebar":"tutorialSidebar"},"support":{"id":"support","title":"Questions & Answers","description":"Why have you removed the sample project\'s section of the documentation?","sidebar":"tutorialSidebar"}}}')}}]);