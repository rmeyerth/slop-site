"use strict";(self.webpackChunkslop_site=self.webpackChunkslop_site||[]).push([[708],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>g});var r=a(7294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function o(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?o(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},o=Object.keys(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)a=o[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var p=r.createContext({}),s=function(t){var e=r.useContext(p),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},d=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,o=t.originalType,p=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),u=s(a),c=n,g=u["".concat(p,".").concat(c)]||u[c]||m[c]||o;return a?r.createElement(g,l(l({ref:e},d),{},{components:a})):r.createElement(g,l({ref:e},d))}));function g(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var o=a.length,l=new Array(o);l[0]=c;var i={};for(var p in e)hasOwnProperty.call(e,p)&&(i[p]=e[p]);i.originalType=t,i[u]="string"==typeof t?t:n,l[1]=i;for(var s=2;s<o;s++)l[s]=a[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},5857:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_position:3},l="Operators",i={unversionedId:"Language/operators",id:"Language/operators",title:"Operators",description:"SLOP uses the same operators as C / C++ / Java languages out of the box. Below a list of the supported operators",source:"@site/docs/Language/operators.md",sourceDirName:"Language",slug:"/Language/operators",permalink:"/slop-site/docs/Language/operators",draft:!1,editUrl:"https://gitlab.com/tronied/slop/docs/Language/operators.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Literals",permalink:"/slop-site/docs/Language/literals"},next:{title:"Functions",permalink:"/slop-site/docs/Language/functions"}},p={},s=[{value:"Logical Operators",id:"logical-operators",level:2}],d={toc:s};function u(t){let{components:e,...a}=t;return(0,n.kt)("wrapper",(0,r.Z)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"operators"},"Operators"),(0,n.kt)("p",null,"SLOP uses the same operators as C / C++ / Java languages out of the box. Below a list of the supported operators\nwith examples:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Notation"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Example"),(0,n.kt)("th",{parentName:"tr",align:"left"},"Result"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Add"),(0,n.kt)("td",{parentName:"tr",align:"left"},"+"),(0,n.kt)("td",{parentName:"tr",align:"left"},"1 + 1"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Subtract"),(0,n.kt)("td",{parentName:"tr",align:"left"},"-"),(0,n.kt)("td",{parentName:"tr",align:"left"},"4 - 2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Divide"),(0,n.kt)("td",{parentName:"tr",align:"left"},"/"),(0,n.kt)("td",{parentName:"tr",align:"left"},"4 / 2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Multiply"),(0,n.kt)("td",{parentName:"tr",align:"left"},"*"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2 * 2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"4")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Greater or Equal To"),(0,n.kt)("td",{parentName:"tr",align:"left"},">="),(0,n.kt)("td",{parentName:"tr",align:"left"},"5 >= 4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Less than or Equal To"),(0,n.kt)("td",{parentName:"tr",align:"left"},"<="),(0,n.kt)("td",{parentName:"tr",align:"left"},"5 <= 4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Less than"),(0,n.kt)("td",{parentName:"tr",align:"left"},"<"),(0,n.kt)("td",{parentName:"tr",align:"left"},"3 < 4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Greater than"),(0,n.kt)("td",{parentName:"tr",align:"left"},">"),(0,n.kt)("td",{parentName:"tr",align:"left"},"3 ",">"," 4"),(0,n.kt)("td",{parentName:"tr",align:"left"},"false")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Modulus"),(0,n.kt)("td",{parentName:"tr",align:"left"},"%"),(0,n.kt)("td",{parentName:"tr",align:"left"},"8 % 3"),(0,n.kt)("td",{parentName:"tr",align:"left"},"2")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Not Equal"),(0,n.kt)("td",{parentName:"tr",align:"left"},"!="),(0,n.kt)("td",{parentName:"tr",align:"left"},"1 != 2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"Equals"),(0,n.kt)("td",{parentName:"tr",align:"left"},"=="),(0,n.kt)("td",{parentName:"tr",align:"left"},"2 == 2"),(0,n.kt)("td",{parentName:"tr",align:"left"},"true")))),(0,n.kt)("p",null,"The default set of operators follow the standard BODMAS order of mathematical operations. This along with modification or\naddition of new operators is supported. Please see the ",(0,n.kt)("a",{parentName:"p",href:"#custom-operators"},"Custom Operators")," section for more information. "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"NOTE"),": There is a limitation where operators that modify left-side values i.e. increment (++), decrement (--)\nare only supported for special cases in specific statements. This is because at present the Parser does not\nsupport modification of variables directly, but have to be reassigned using the 'val = expr' pattern. An issue has\nbeen logged about this and will look to included in upcoming versions. Until that time to increment a variable\nplease use 'myVar = myVar + 1'."),(0,n.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,n.kt)("p",null,"Logical Operators are used when wanting to perform multiple parts to a condition. Irrespective of the language used, they\nshare the same fundamental names which are AND and OR. A language such as Java / C# uses && and || respectively, whereas\na language like Pascal adopts a more literal approach by using 'and' and 'or'. The default for SLOP follows this more\nliteral approach (and | or), though like with everything this can be customized through the creation of a class which\nextends both the Token<?> class and implemented the LogicOperatorHandler interface. You can then choose in the REGEX\npattern the values you wish to use:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'@Override\npublic String getPattern() {\n    return "^(\\\\|\\\\||&&)";\n}\n')),(0,n.kt)("p",null,"From there you can set your customized version of the Logic Operator Handler to the config by using the following:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"SLOPConfig config = new SLOPConfig();\nconfig.setLogicOperatorHandler(new MyCustomLogicOperators());\n")),(0,n.kt)("p",null,"For more details, please look at the LogicOperator class file within the SLOP codebase. The final stage will be to\nconfigure which tag is the OR operator. You can do this by setting a property:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},'config.setProperty(DefaultProperty.OR_OPERATOR, "||");\n')),(0,n.kt)("p",null,"From there you can start using those in expressions (AND):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"> 99 > 50 && 23 - 22 == 1\nResult: true\n")),(0,n.kt)("p",null,"The OR operator:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"> 54 - 12 == 9 || 1 < 2\nResult: true\n")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"NOTE"),": Please note again, the default logical operators for SLOP are 'and' and 'or'."))}u.isMDXComponent=!0}}]);