"use strict";(self.webpackChunkslop_site=self.webpackChunkslop_site||[]).push([[9671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,f=p["".concat(l,".").concat(d)]||p[d]||h[d]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:1},i="Introduction",s={unversionedId:"intro",id:"intro",title:"Introduction",description:"The idea for SLOP came from a need to create a cost effective method of generating documents from templates. These",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",draft:!1,editUrl:"https://gitlab.com/tronied/slop/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Overview",permalink:"/docs/Language/overview"}},l={},c=[],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The idea for SLOP came from a need to create a cost effective method of generating documents from templates. These\ntemplates would hold field references and logic. When run through a processor class it would resolve all known values.\nInitially the concept was simple but soon functionality was added to handle collections, maps and eventually basic\nconditionals. The implementation for this used regular expressions and an on-the-fly tokenization to resolve values.\nA big shift however came a request to add the ability to calculate values together. Due to the restrictive nature of\nthe implementation, this split the project into two parts or processing classes. This is where the idea for SLOP first\ncame about by firstly the idea of unifying both parts but also adapting the best aspects of each. Work soon commenced\non this personal project and I gave the project the following goals:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Expressions will be restricted to a single line (hence the name) and stored as Strings"),(0,r.kt)("li",{parentName:"ol"},"Every aspect of SLOP must be configurable"),(0,r.kt)("li",{parentName:"ol"},"Facilitate the use of the underlying language through functions and native calls"),(0,r.kt)("li",{parentName:"ol"},"Implement an easy to use grammar system to define statements"),(0,r.kt)("li",{parentName:"ol"},"Extensions to the language must exist in a single easy to define class")),(0,r.kt)("p",null,'I won\'t go into too much depth about the process I went through to achieve this, but suffice to say the project went\nthrough 7 or 8 re-writes to reach its present form. The total project time has taken 6 months from inception to what\nI now consider to be functionally complete. As a Java developer, I always find myself asking the question "why is\nthis statement limited to just this?" or "why can\'t it do that?". Now with the ability to write my own statements,\nthat restriction has been somewhat lifted. With statements like the switch I find I\'m even using the SLOP alternatives\nto avoid lengthy Java conditionals!'),(0,r.kt)("p",null,"The project is far from being done as at the time of writing I am still looking to write the sample projects and\nfinish off writing the documentation. I have split this into several different sections covering the basics all the\nway through to adding your own statements. I always find it difficult to strike a balance between being too technical\nand simple. As such, if you do have any feedback, questions or issues I would more than welcome them."))}p.isMDXComponent=!0}}]);